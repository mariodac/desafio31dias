// polimorfismo
// em POO, √© habilidade de diferentes classes derivadas implementarem m√©todos com o mesmo nome e comportamentos diferentes

// no mundo real, temos diferentes tipos de sapatos: t√™nis, chinelo e sapato social
// todos t√™m a fun√ß√£o "usar", mas cada um √© usado de forma diferente
// t√™nis para correr, chinelo para casa, sapato social para eventos formais

class Sapato {
    usar() {
        console.log("Usando um sapato gen√©rico.");
    }
}

class Tenis extends Sapato {
    usar() {
        console.log("Usando t√™nis para correr. üèÉ‚Äç‚ôÇÔ∏è");
    }
}

class Chinelo extends Sapato {
    usar() {
        console.log("Usando chinelo em casa. üè†");
    }
}

const meuTenis = new Tenis();
const meuChinelo = new Chinelo();

meuTenis.usar();
meuChinelo.usar();

// sobrescrita de m√©todos
// polimorfismo acontece quando uma subclasse sobrescreve um m√©todo herdado da superclasse para fornecer um comportamento espec√≠fico
class Animal {
    emitirSom() {
        console.log("O animal emite um som.");
    }
}

class Cachorro extends Animal {
    emitirSom() {
        console.log("O cachorro late. üê∂");
    }
}

class Gato extends Animal {
    emitirSom() {
        console.log("O gato mia. üê±");
    }
}

const cachorro = new Cachorro();
const gato = new Gato();

cachorro.emitirSom(); // Sa√≠da: O cachorro late. üê∂
gato.emitirSom(); // Sa√≠da: O gato mia. üê±

// polimorfismo com m√©todos gen√©ricos
// utilize o polimorfismo para tratar diferentes tipos de objetos de forma gen√©rica

class Forma {
    calcularArea() {
        console.log("√Årea da forma gen√©rica.");
    }
}

class Quadrado extends Forma {
    constructor(lado) {
        super();
        this.lado = lado;
    }

    calcularArea() {
        console.log(`√Årea do quadrado: ${this.lado * this.lado}`);
    }
}

class Circulo extends Forma {
    constructor(raio) {
        super();
        this.raio = raio;
    }

    calcularArea() {
        console.log(`√Årea do c√≠rculo: ${Math.PI * this.raio ** 2}`);
    }
}

const formas = [new Quadrado(4), new Circulo(3)];

formas.forEach((forma) => forma.calcularArea());

// use a sobrescrita com prop√≥sito, certifique-se de que a implementa√ß√£o espec√≠fica de um m√©todo em uma subclasse faz sentido no contexto
// mantenha o c√≥digo flex√≠vel, polimorfismo ajuda a reduzir o acoplamento entre partes do sistema, facilitando futuras altera√ß√µes ou extens√µes
// evite repeti√ß√£o de c√≥digo, reutilize ao m√°ximo os m√©todos da superclasse antes de sobrescrev√™-los
