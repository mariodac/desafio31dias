// heran√ßa √© um mecanismo que permite que uma classe (subclasse) herde atributos e m√©todos de outra classe (superclasse)
// classe pai: ve√≠culo com atributos e m√©todos comuns a todos os ve√≠culos, como m√©todos acelerar, frear, etc, e atributos como rodas e motor
// classe filha: carro herda atributos e m√©todos de ve√≠culo, mas pode ter caracter√≠sticas pr√≥prias, como portas, tr√¢nsmiss√£o, etc
// exemplo
class Veiculo {
    constructor(marca, modelo) {
        this.marca = marca;
        this.modelo = modelo;
    }

    mover() {
        console.log(`${this.marca} ${this.modelo} est√° se movendo! üöó`);
    }
}

class Carro extends Veiculo {
    abrirPorta() {
        console.log(`${this.marca} ${this.modelo} est√° abrindo as portas! üö™`);
    }
}

const meuCarro = new Carro("Toyota", "Corolla");
meuCarro.mover();
meuCarro.abrirPorta();

// heran√ßa em javascript
// superclasse cont√©m os atributos e m√©todos que podem ser herdados por outras subclasses
class Animal {
    constructor(nome) {
        this.nome = nome;
    }

    fazerSom() {
        console.log(`${this.nome} est√° fazendo um som! üêæ`);
    }
}

// subclasses herdam os atributos e m√©todos da superclasse, usando a palavra-chave extends
class Cachorro extends Animal {
    latir() {
        console.log(`${this.nome} est√° latindo! üê∂`);
    }
}

// construtor da superclasse sendo chamado na classe filha, utilizando palavra-chave super
class Cachorro extends Animal {
    constructor(nome, raca) {
        super(nome); // Chama o construtor da superclasse
        this.raca = raca;
    }

    latir() {
        console.log(`${this.nome}, da ra√ßa ${this.raca}, est√° latindo! üê∂`);
    }
}

// sobrescrita de m√©todos (override)
// subclasses podem sobrescrever m√©todos herdados da superclasse
class Animal {
    fazerSom() {
        console.log("Algum som gen√©rico!");
    }
}

class Gato extends Animal {
    fazerSom() {
        console.log("Miau! üê±");
    }
}

const meuGato = new Gato();
meuGato.fazerSom();

// use heran√ßa com modera√ß√£o, pode ser utilizado composi√ß√£o de objetos em vez de heran√ßa
// cuidado com sobrescrita de m√©todos, cheque que m√©todos sobrescritos cause comportamento inesperado
// aproveite a reutiliza√ß√£o de c√≥digo, heran√ßa pode tornar o c√≥digo mais modular e reutiliz√°vel


