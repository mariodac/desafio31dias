// recurs√£o √© uma t√©cnica onde uma fun√ß√£o se chama repetidamente at√© atingir uma condi√ß√£o que interrompa essa chamada

function contarRegressivamente(numero) {
    if (numero === 0) {
        console.log("Fim! üöÄ");
        return;
    }

    console.log(numero);
    contarRegressivamente(numero - 1); // A fun√ß√£o chama a si mesma
}

contarRegressivamente(5);

// estrutura da recurs√£o
// 1. caso base, condi√ß√£o que interrompe a recurs√£o, sem isso entraria em loop infinito
// 2. chamada recursiva, chama a si mesma com um valor atualizado

function somaAte(numero) {
    if (numero === 1) return 1; // Caso base
    return numero + somaAte(numero - 1); // Chamada recursiva
}

console.log(somaAte(5)); 

// pilha de chamada
// recurs√£o utilizar uma estrutura pilha de chamadas. Cada chamada √© adicionada na pilha de chamadas, quando o caso base √© atingido, as chamadas come√ßam a ser resolvidas em ordem inversa.
// visualizando a pilha
// 1. somaAte(5) chama somaAte(4)
// 2. somaAte(4) chama somaAte(3)
// 3. somaAte(3) chama somaAte(2)
// 4. somaAte(2) chama somaAte(1)
// 5. somaAte(1) , que retorna 1
// 6. as chamadas come√ßam a ser resolvidas: 1 + 2 + 3 + 4 + 5

// cuidados com a recurs√£o
// 1. evitar loops infinitos, garantindo o caso base, se o caso base n√£o for atingido, o loop n√£o ir√° parar o que pode causa um estouro de pilha
// 2. evite recurs√µes profundas: se o problema envolve muitas chamadas, prefira usar um loop, contornando problemas de desempenho
// 3. compare com itera√ß√£o: nem todo problema precisa de recurs√£o, compare a efici√™ncia entre loop e recurs√£o

